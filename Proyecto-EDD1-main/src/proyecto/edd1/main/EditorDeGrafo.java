/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto.edd1.main;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author mainp
 */
public class EditorDeGrafo extends javax.swing.JFrame {

    private Grafo grafo; // Agregar una variable para almacenar el grafo

    /**
     * Creates new form EditorDeGrafo
     */
    public EditorDeGrafo(Grafo grafo) { // Constructor que acepta un objeto Grafo
        initComponents();
        this.grafo = grafo; // Inicializar la variable grafo
        llenarComboBoxNodos(); // Llenar el JComboBox con los nodos
        llenarComboBox3(); // Llenar jComboBox3 con los nodos
    }

    // Método para llenar el JComboBox con los nodos existentes
    private void llenarComboBoxNodos() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        for (Nodo nodo : grafo.getNodos()) { // Asegúrate de que getNodos() esté definido
            if (nodo != null) {
                model.addElement(nodo.getNombre());
            }
        }
        jComboBox2.setModel(model); // Establecer el modelo en jComboBox2
    }

    // Método para llenar jComboBox3 con los nodos existentes
    private void llenarComboBox3() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        for (Nodo nodo : grafo.getNodos()) { // Asegúrate de que getNodos() esté definido
            if (nodo != null) {
                model.addElement(nodo.getNombre());
            }
        }
        jComboBox3.setModel(model); // Establecer el modelo en jComboBox3
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DFS", "BFS" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Tipo de Generacion de areas comerciales:");

        jTextField1.setText("0");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Estaciones entre areas comerciales:");

        jButton1.setText("Editar nodo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generar areas comerciales");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setText("Informacion de Nodo");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("-------------------------------------------------");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Nodo seleccionado");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(71, 71, 71))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE)
                    .addComponent(jTextField1)
                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE))
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String nombreNodo = (String) jComboBox2.getSelectedItem(); // Obtener el nodo seleccionado
        Nodo[] nodos = grafo.getNodos(); // Obtener los nodos del grafo
        for (Nodo nodo : nodos) {
            if (nodo != null && nodo.getNombre().equals(nombreNodo)) {
                new EditorNodoDialog(this, nodo, grafo); // Abrir el diálogo de edición
                break;
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Obtener el nodo inicial
        String nodoInicial = (String) jComboBox3.getSelectedItem();
        
        // Obtener la cantidad de nodos de separación
        int distanciaMaxima;
        try {
            distanciaMaxima = Integer.parseInt(jTextField1.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido para la distancia máxima.");
            return; // Salir si el número no es válido
        }

        // Obtener el índice del nodo inicial
        int indiceNodoInicial = grafo.obtenerIndice(nodoInicial);
        if (indiceNodoInicial == -1) {
            JOptionPane.showMessageDialog(this, "El nodo inicial no existe en el grafo.");
            return; // Salir si el nodo no existe
        }

        // Crear un arreglo para almacenar los nodos intercalados
        String[] nodosIntercalados = new String[grafo.getNodos().length];
        int contador = 0;

        // Recorrer los nodos a partir del nodo inicial
        for (int i = 0; i < grafo.getNodos().length; i++) {
            if (grafo.getNodos()[i] != null) {
                // Solo agregar el nodo si está en la posición correcta
                if ((i - indiceNodoInicial) % (distanciaMaxima + 1) == 0) {
                    nodosIntercalados[contador++] = grafo.getNodos()[i].getNombre(); // Agregar el nodo a la lista
                }
            }
        }

        // Imprimir la lista de nodos intercalados
        StringBuilder nodosImpresos = new StringBuilder("Nodos intercalados: ");
        for (int i = 0; i < contador; i++) {
            nodosImpresos.append(nodosIntercalados[i]);
            if (i < contador - 1) {
                nodosImpresos.append(", ");
            }
        }

        System.out.println(nodosImpresos.toString());
        JOptionPane.showMessageDialog(this, nodosImpresos.toString());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    // Método que se llama cuando se selecciona un nodo en jComboBox2
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {
        String nombreNodo = (String) jComboBox2.getSelectedItem(); // Obtener el nodo seleccionado
        mostrarInformacionNodo(nombreNodo); // Llamar al método para mostrar la información
    }

    // Método para mostrar la información del nodo en jTextArea1
    private void mostrarInformacionNodo(String nombreNodo) {
        Nodo[] nodos = grafo.getNodos(); // Obtener los nodos del grafo
        for (Nodo nodo : nodos) {
            if (nodo != null && nodo.getNombre().equals(nombreNodo)) {
                StringBuilder contenido = new StringBuilder();
                contenido.append("Nombre: ").append(nodo.getNombre()).append("\n");
                contenido.append("Conexiones: ");
                for (int i = 0; i < nodo.getConexionIndex(); i++) {
                    contenido.append(nodo.getConexiones()[i].getNombre());
                    if (i < nodo.getConexionIndex() - 1) {
                        contenido.append(", ");
                    }
                }
                contenido.append("\n");
                // Mostrar si es un área comercial
                if (nodo.isAreaComercial()) {
                    contenido.append("Área Comercial: Sí");
                } else {
                    contenido.append("Área Comercial: No");
                }
                jTextArea1.setText(contenido.toString()); // Establecer el texto en el JTextArea
                break; // Salir del bucle una vez que se encuentra el nodo
            }
        }
    }

    private void jButtonMarcarAreasComercialesActionPerformed(java.awt.event.ActionEvent evt) {
        String tipoMovimiento = (String) jComboBox1.getSelectedItem(); // Obtener el tipo de movimiento
        String nodoInicial = (String) jComboBox2.getSelectedItem(); // Obtener el nodo inicial
        int distanciaMaxima = Integer.parseInt(jTextField1.getText()); // Obtener la distancia máxima

        if (tipoMovimiento.equals("DFS")) {
            grafo.marcarAreasComercialesDFS(nodoInicial, distanciaMaxima);
        } else if (tipoMovimiento.equals("BFS")) {
            grafo.marcarAreasComercialesBFS(nodoInicial, distanciaMaxima);
        }
    }

    private void jButtonGenerarAreaComercialActionPerformed(java.awt.event.ActionEvent evt) {
        // Obtener el tipo de búsqueda (DFS o BFS)
        String tipoBusqueda = (String) jComboBox1.getSelectedItem();
        
        // Obtener la cantidad de nodos entre áreas comerciales
        int distanciaMaxima;
        try {
            distanciaMaxima = Integer.parseInt(jTextField1.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido para la distancia máxima.");
            return; // Salir si el número no es válido
        }
        
        // Obtener el primer nodo
        String nodoInicial = (String) jComboBox3.getSelectedItem();
        
        // Llamar a la función que marca los nodos como comerciales
        if (tipoBusqueda.equals("DFS")) {
            grafo.seleccionarNodosConSaltoDFS(nodoInicial, distanciaMaxima);
        } else if (tipoBusqueda.equals("BFS")) {
            grafo.seleccionarNodosConSaltoBFS(nodoInicial, distanciaMaxima);
        }
        
        // Mostrar el recorrido en el JTextArea
        jTextArea1.setText(grafo.getRecorridoNodos()); // Asegúrate de que este método esté definido en Grafo
        
        // Opcional: Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(this, "Áreas comerciales generadas correctamente.");
    }

    private void mostrarNodoViewer() {
        Nodo[] nodos = grafo.getNodos(); // Obtener los nodos del grafo
        NodoViewer nodoViewer = new NodoViewer(nodos, grafo); // Pasar la referencia de grafo
    }

    public void actualizarComboBoxNodos() { // Cambiar a public
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        for (Nodo nodo : grafo.getNodos()) { // Asegúrate de que getNodos() esté definido
            if (nodo != null) {
                model.addElement(nodo.getNombre());
            }
        }
        jComboBox2.setModel(model); // Establecer el modelo en jComboBox2
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
